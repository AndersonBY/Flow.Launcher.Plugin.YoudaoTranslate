# @Author: Bi Ying
# @Date:   2022-08-02 20:03:15
# @Last Modified by:   Bi Ying
# @Last Modified time: 2022-08-03 01:53:01
name: Build and Publish

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags-ignore:
      - 'v*'
    paths-ignore: 
      - .github/workflows/*
      - README.md
      - assets/*
env:
  PYTHON_VER: 3.8
jobs:
  build-publish:
    name: Build and Publish
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VER }}
      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel click babel
          pip install -r ./requirements.txt

      - name: Install Dependencies to Local
        run: pip install -r ./requirements.txt -t ./lib

      - name: Update 'plugin.json' information
        run: python commands.py gen-plugin-info

      - name: Remove Python file artifacts
        run: python commands.py clean-pyc

      - name: Pack plugin to a zip file
        run: python commands.py build

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'plugin.json'
          prop_path: 'Version'
      - run: echo ${{ steps.version.outputs.prop }} 

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          # This token is provided by Actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.prop }}
          release_name: ${{ steps.version.outputs.prop }}
          draft: true
          prerelease: false

      - name: Get Asset name
        run: |
          export PKG=$(ls build/ | grep zip)
          set -- $PKG
          echo "name=$1" >> $GITHUB_ENV

      - name: Upload Release (zip) to GitHub
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/${{ env.name }}
          asset_name: ${{ env.name }}
          asset_content_type: application/zip
